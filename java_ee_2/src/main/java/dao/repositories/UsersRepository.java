package dao.repositories;

import dao.mappers.ResultSetMapper;
import domain.User;

import java.sql.Connection;
import java.sql.SQLException;

public class UsersRepository extends RepositoryBase<User> implements UsersDAO {

  public UsersRepository (Connection connection, ResultSetMapper<User> mapper) throws SQLException{
    super(connection, mapper);

    //dodałem tak żeby było wygodniej
    User user = new User();

    user.setUsername("admin");
    user.setPassword("admin");
    user.setEmail("admin@company.com");
    user.setAdmin(true);

    add(user);
  }

  protected void setupInsert(User user) throws SQLException {
    insert.setString(1, user.getUsername());
    insert.setString(2, user.getPassword());
    insert.setString(3, user.getEmail());
    insert.setBoolean(4, user.isPremium());
    insert.setBoolean(5, user.isAdmin());

  }

  protected void setupUpdate(User user) throws SQLException {
    update.setString(1, user.getUsername());
    update.setString(2, user.getPassword());
    update.setString(3, user.getEmail());
    update.setBoolean(4, user.isPremium());
    update.setBoolean(5, user.isAdmin());
    update.setInt(6, user.getId());

  }


  @Override
  protected String tableName() {
    return "user";
  }

  @Override
  protected String[] schema() {
    return new String[] {
      "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY",
      "username VARCHAR(30) NOT NULL",
      "password VARCHAR(30) NOT NULL",
      "email VARCHAR(30) NOT NULL",
      "isPremium BOOLEAN DEFAULT FALSE NOT NULL",
      "isAdmin BOOLEAN DEFAULT FALSE NOT NULL"
    };
  }

  @Override
  protected String[] params() {
    return new String[] {
      "username",
      "password",
      "email",
      "isPremium",
      "isAdmin"
    };
  }

  public User getUserByUsername (String username) {
    return getOneByUsername(username);
  }

  @Override
  public boolean areValuesUsed (String newUsername, String newEmail) {
    User userByUsername = getOneByUsername(newUsername);
    User userByEmail = getOneByEmail(newEmail);

    return userByUsername != null && userByEmail != null;
  }


}
